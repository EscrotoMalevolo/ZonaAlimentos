/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package alimentos.view.servicios;

import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import alimentos.controller.ZonaAlimentos;
import alimentos.controller.clasesAlimentos.Carnicos;
import alimentos.controller.clasesAlimentos.Frutas;
import alimentos.controller.clasesAlimentos.Vegetales;
import alimentos.model.Db;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author USER
 */
public class VerAlimentos extends javax.swing.JInternalFrame {
    private Db db= new Db();

    /**
     * Creates new form VerAlimentos
     */
    public VerAlimentos() {
        initComponents();
        DefaultListModel<String> modelAlimentos=new DefaultListModel<>();
        listaNombreAlimentos.setModel(modelAlimentos);
        modelAlimentos.addElement("Frutas");
        modelAlimentos.addElement("Verduras");
        modelAlimentos.addElement("Carnes");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanel = new javax.swing.JScrollPane();
        listaNombreAlimentos = new javax.swing.JList<>();
        ScrollPaneAnimals = new javax.swing.JScrollPane();
        tablaMostrarAlimentos = new javax.swing.JTable();
        texto1VerAlimento = new javax.swing.JLabel();
        texto2Alimentos = new javax.swing.JLabel();
        botonCargar = new javax.swing.JButton();

        listaNombreAlimentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaNombreAlimentosMouseClicked(evt);
            }
        });
        scrollPanel.setViewportView(listaNombreAlimentos);

        tablaMostrarAlimentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tamaño", "Precio", "Color"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollPaneAnimals.setViewportView(tablaMostrarAlimentos);

        texto1VerAlimento.setText("Elija un Alimento para verlo: ");

        texto2Alimentos.setText("Alimentos:");

        botonCargar.setText("Cargar de Base de Datos");
        botonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(ScrollPaneAnimals, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(texto1VerAlimento)
                        .addGap(161, 161, 161)
                        .addComponent(texto2Alimentos))
                    .addComponent(botonCargar))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(texto1VerAlimento)
                    .addComponent(texto2Alimentos, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ScrollPaneAnimals, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(botonCargar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaNombreAlimentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaNombreAlimentosMouseClicked
        // Obtener el índice de la jaula seleccionada
        int indice = listaNombreAlimentos.getSelectedIndex();
        System.out.println(indice);

        if(indice==0){
            DefaultTableModel tablitaAlimentos = (DefaultTableModel) tablaMostrarAlimentos.getModel();
            tablitaAlimentos.setRowCount(0); // Limpiar la tabla antes de agregar nuevas filas

            // Agregar los datos de los animales de la jaula seleccionada a la tabla
            for (Frutas fruta : ZonaAlimentos.getFrutas()) {
                tablitaAlimentos.addRow(new Object[]{
                    fruta.getName(),
                    fruta.getTamaño(),
                    fruta.getPrecio(),
                    "No aplica",
                });
            }
        }else if(indice==1){
            DefaultTableModel tablitaAnimals = (DefaultTableModel) tablaMostrarAlimentos.getModel();
            tablitaAnimals.setRowCount(0); // Limpiar la tabla antes de agregar nuevas filas

            // Agregar los datos de los animales de la jaula seleccionada a la tabla
            for (Vegetales verduras : ZonaAlimentos.getVegetales()) {
                tablitaAnimals.addRow(new Object[]{
                    verduras.getName(),
                    verduras.getTamaño(),
                    verduras.getPrecio(),
                    "No aplica",
                });
            }
        }else if (indice==2){
            DefaultTableModel tablitaAnimals = (DefaultTableModel) tablaMostrarAlimentos.getModel();
            tablitaAnimals.setRowCount(0); // Limpiar la tabla antes de agregar nuevas filas

            // Agregar los datos de los animales de la jaula seleccionada a la tabla
            for (Carnicos carne : ZonaAlimentos.getCarne()) {
                tablitaAnimals.addRow(new Object[]{
                    carne.getName(),
                    carne.getTamaño(),
                    carne.getPrecio(),
                    carne.getColor(),
                });
            }
        }
    }//GEN-LAST:event_listaNombreAlimentosMouseClicked

    private void botonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarActionPerformed
        try {
            for(Frutas fruta: db.obtenerFrutas()){
                ZonaAlimentos.setFrutas(fruta);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VerAlimentos.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            for(Vegetales vegetal: db.obtenerVegetales()){
                ZonaAlimentos.setVerduras(vegetal);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VerAlimentos.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            for(Carnicos carne: db.obtenerCarnes()){
                ZonaAlimentos.setCarnes(carne);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VerAlimentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonCargarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPaneAnimals;
    private javax.swing.JButton botonCargar;
    private javax.swing.JList<String> listaNombreAlimentos;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTable tablaMostrarAlimentos;
    private javax.swing.JLabel texto1VerAlimento;
    private javax.swing.JLabel texto2Alimentos;
    // End of variables declaration//GEN-END:variables
}
